class WeatherExtension {
  constructor() {
    this.cache = new Map();
  }

  getInfo() {
    return {
      id: 'weather',
      name: 'Weather API',
      color1: '#8ab4f8',     // –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç (–≥–æ–ª—É–±–æ–π)
      color2: '#6c9bdc',     // —á—É—Ç—å —Ç–µ–º–Ω–µ–µ
      color3: '#4e82c0',     // –µ—â—ë —Ç–µ–º–Ω–µ–µ
      blocks: [
        {
          opcode: 'getTemperature',
          blockType: Scratch.BlockType.REPORTER,
          text: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ [CITY] ¬∞C',
          arguments: {
            CITY: { type: Scratch.ArgumentType.STRING, defaultValue: '–ú–æ—Å–∫–≤–∞' }
          }
        },
        {
          opcode: 'getFeelsLike',
          blockType: Scratch.BlockType.REPORTER,
          text: '–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ –≤ [CITY] ¬∞C',
          arguments: {
            CITY: { type: Scratch.ArgumentType.STRING, defaultValue: '–ú–æ—Å–∫–≤–∞' }
          }
        },
        {
          opcode: 'getWindSpeed',
          blockType: Scratch.BlockType.REPORTER,
          text: '–í–µ—Ç–µ—Ä –≤ [CITY] –º/—Å',
          arguments: {
            CITY: { type: Scratch.ArgumentType.STRING, defaultValue: '–ú–æ—Å–∫–≤–∞' }
          }
        },
        {
          opcode: 'getWindDirection',
          blockType: Scratch.BlockType.REPORTER,
          text: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –≤ [CITY] ¬∞',
          arguments: {
            CITY: { type: Scratch.ArgumentType.STRING, defaultValue: '–ú–æ—Å–∫–≤–∞' }
          }
        },
        {
          opcode: 'getHumidity',
          blockType: Scratch.BlockType.REPORTER,
          text: '–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤ [CITY] %',
          arguments: {
            CITY: { type: Scratch.ArgumentType.STRING, defaultValue: '–ú–æ—Å–∫–≤–∞' }
          }
        },
        {
          opcode: 'getPrecipitation',
          blockType: Scratch.BlockType.REPORTER,
          text: '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ –≤ [CITY] %',
          arguments: {
            CITY: { type: Scratch.ArgumentType.STRING, defaultValue: '–ú–æ—Å–∫–≤–∞' }
          }
        },
        {
          opcode: 'getCloudCover',
          blockType: Scratch.BlockType.REPORTER,
          text: '–û–±–ª–∞—á–Ω–æ—Å—Ç—å –≤ [CITY] %',
          arguments: {
            CITY: { type: Scratch.ArgumentType.STRING, defaultValue: '–ú–æ—Å–∫–≤–∞' }
          }
        },
        {
          opcode: 'getPressure',
          blockType: Scratch.BlockType.REPORTER,
          text: '–î–∞–≤–ª–µ–Ω–∏–µ –≤ [CITY] –≥–ü–∞',
          arguments: {
            CITY: { type: Scratch.ArgumentType.STRING, defaultValue: '–ú–æ—Å–∫–≤–∞' }
          }
        },
        {
          opcode: 'getSunrise',
          blockType: Scratch.BlockType.REPORTER,
          text: '–í—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞ –≤ [CITY]',
          arguments: {
            CITY: { type: Scratch.ArgumentType.STRING, defaultValue: '–ú–æ—Å–∫–≤–∞' }
          }
        },
        {
          opcode: 'getSunset',
          blockType: Scratch.BlockType.REPORTER,
          text: '–í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞ –≤ [CITY]',
          arguments: {
            CITY: { type: Scratch.ArgumentType.STRING, defaultValue: '–ú–æ—Å–∫–≤–∞' }
          }
        },
        {
          opcode: 'getWeatherText',
          blockType: Scratch.BlockType.REPORTER,
          text: '–ü–æ–≥–æ–¥–∞ –≤ [CITY] –∫–∞–∫ —Ç–µ–∫—Å—Ç',
          arguments: {
            CITY: { type: Scratch.ArgumentType.STRING, defaultValue: '–ú–æ—Å–∫–≤–∞' }
          }
        },
        {
          opcode: 'getWeatherJson',
          blockType: Scratch.BlockType.REPORTER,
          text: '–ü–æ–≥–æ–¥–∞ –≤ [CITY] (JSON)',
          arguments: {
            CITY: { type: Scratch.ArgumentType.STRING, defaultValue: '–ú–æ—Å–∫–≤–∞' }
          }
        }
      ]
    };
  }

  getWeatherDescription(code) {
    const descriptions = {
      0: '—è—Å–Ω–æ', 1: '–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ', 2: '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å', 3: '–ø–∞—Å–º—É—Ä–Ω–æ',
      45: '—Ç—É–º–∞–Ω', 48: '–∏–Ω–µ–π',
      51: '–ª—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å', 53: '—É–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å', 55: '–≥—É—Å—Ç–∞—è –º–æ—Ä–æ—Å—å',
      56: '–ª—ë–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å', 57: '—Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
      61: '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å', 63: '—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å', 65: '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
      66: '–ª—ë–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å', 67: '—Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
      71: '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥', 73: '—É–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥', 75: '—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥', 77: '—Å–Ω–µ–∂–Ω—ã–µ –∑—ë—Ä–Ω–∞',
      80: '–Ω–µ–±–æ–ª—å—à–æ–π –ª–∏–≤–µ–Ω—å', 81: '—É–º–µ—Ä–µ–Ω–Ω—ã–π –ª–∏–≤–µ–Ω—å', 82: '—Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å',
      85: '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥–æ–ø–∞–¥', 86: '—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥',
      95: '–≥—Ä–æ–∑–∞', 96: '–≥—Ä–æ–∑–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –≥—Ä–∞–¥–æ–º', 99: '–≥—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –≥—Ä–∞–¥–æ–º'
    };
    return descriptions[code] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  getWeatherIcon(code) {
    const icons = {
      0: '‚òÄÔ∏è', 1: 'üå§Ô∏è', 2: '‚õÖ', 3: '‚òÅÔ∏è',
      45: 'üå´Ô∏è', 48: 'üå´Ô∏è',
      51: 'üåßÔ∏è', 53: 'üåßÔ∏è', 55: 'üåßÔ∏è',
      56: '‚ùÑÔ∏èüåßÔ∏è', 57: '‚ùÑÔ∏èüåßÔ∏è',
      61: 'üåßÔ∏è', 63: 'üåßÔ∏è', 65: 'üåßÔ∏è',
      66: '‚ùÑÔ∏èüåßÔ∏è', 67: '‚ùÑÔ∏èüåßÔ∏è',
      71: '‚ùÑÔ∏è', 73: '‚ùÑÔ∏è', 75: '‚ùÑÔ∏è', 77: '‚ùÑÔ∏è',
      80: 'üåßÔ∏è', 81: 'üåßÔ∏è', 82: 'üåßÔ∏è',
      85: '‚ùÑÔ∏è', 86: '‚ùÑÔ∏è',
      95: '‚õàÔ∏è', 96: '‚õàÔ∏è', 99: '‚õàÔ∏è'
    };
    return icons[code] || '‚ùì';
  }

  async getCoordinates(city) {
    const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(city)}&format=json&limit=1`);
    const data = await response.json();
    if (data.length === 0) throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return { lat: data[0].lat, lon: data[0].lon };
  }

  async getWeatherData(city) {
    if (this.cache.has(city)) {
      const { data, timestamp } = this.cache.get(city);
      if (Date.now() - timestamp < 3600000) return data;
    }
    const { lat, lon } = await this.getCoordinates(city);
    const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&hourly=relativehumidity_2m,precipitation_probability,cloudcover,pressure_msl,windspeed_10m,winddirection_10m&daily=sunrise,sunset&timezone=auto`);
    const data = await response.json();
    if (!data.current_weather) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã');
    const result = { city, current: data.current_weather, hourly: data.hourly, daily: data.daily };
    this.cache.set(city, { data: result, timestamp: Date.now() });
    return result;
  }

  async getTemperature(args) {
    try {
      const { current } = await this.getWeatherData(args.CITY);
      return current.temperature;
    } catch (e) {
      return '–û—à–∏–±–∫–∞';
    }
  }

  async getFeelsLike(args) {
    try {
      const { current } = await this.getWeatherData(args.CITY);
      return current.temperature;
    } catch (e) {
      return '–û—à–∏–±–∫–∞';
    }
  }

  async getWindSpeed(args) {
    try {
      const { current } = await this.getWeatherData(args.CITY);
      return current.windspeed;
    } catch (e) {
      return '–û—à–∏–±–∫–∞';
    }
  }

  async getWindDirection(args) {
    try {
      const { current } = await this.getWeatherData(args.CITY);
      return current.winddirection;
    } catch (e) {
      return '–û—à–∏–±–∫–∞';
    }
  }

  async getHumidity(args) {
    try {
      const { hourly } = await this.getWeatherData(args.CITY);
      return hourly.relativehumidity_2m[0] || '‚Äî';
    } catch (e) {
      return '–û—à–∏–±–∫–∞';
    }
  }

  async getPrecipitation(args) {
    try {
      const { hourly } = await this.getWeatherData(args.CITY);
      return hourly.precipitation_probability[0] || '‚Äî';
    } catch (e) {
      return '–û—à–∏–±–∫–∞';
    }
  }

  async getCloudCover(args) {
    try {
      const { hourly } = await this.getWeatherData(args.CITY);
      return hourly.cloudcover[0] || '‚Äî';
    } catch (e) {
      return '–û—à–∏–±–∫–∞';
    }
  }

  async getPressure(args) {
    try {
      const { hourly } = await this.getWeatherData(args.CITY);
      return hourly.pressure_msl[0] || '‚Äî';
    } catch (e) {
      return '–û—à–∏–±–∫–∞';
    }
  }

  async getSunrise(args) {
    try {
      const { daily } = await this.getWeatherData(args.CITY);
      return daily.sunrise[0].split('T')[1].slice(0, 5);
    } catch (e) {
      return '–û—à–∏–±–∫–∞';
    }
  }

  async getSunset(args) {
    try {
      const { daily } = await this.getWeatherData(args.CITY);
      return daily.sunset[0].split('T')[1].slice(0, 5);
    } catch (e) {
      return '–û—à–∏–±–∫–∞';
    }
  }

  async getWeatherText(args) {
    try {
      const { city, current, hourly, daily } = await this.getWeatherData(args.CITY);
      const feelsLike = current.temperature;
      const humidity = hourly.relativehumidity_2m[0] || '‚Äî';
      const precipitation = hourly.precipitation_probability[0] || '‚Äî';
      const cloudCover = hourly.cloudcover[0] || '‚Äî';
      const pressure = hourly.pressure_msl[0] || '‚Äî';
      const windDirection = current.winddirection || '‚Äî';
      const sunrise = daily.sunrise[0].split('T')[1].slice(0, 5);
      const sunset = daily.sunset[0].split('T')[1].slice(0, 5);
      const weatherDesc = this.getWeatherDescription(current.weathercode);
      const weatherIcon = this.getWeatherIcon(current.weathercode);
      return `–ü–æ–≥–æ–¥–∞ –≤ ${city}: ${current.temperature}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è ${feelsLike}¬∞C), –≤–µ—Ç–µ—Ä ${current.windspeed} –º/—Å (${windDirection}¬∞), –≤–ª–∞–∂–Ω–æ—Å—Ç—å ${humidity}%, –æ—Å–∞–¥–∫–∏ ${precipitation}%, –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ${cloudCover}%, –¥–∞–≤–ª–µ–Ω–∏–µ ${pressure} –≥–ü–∞, —Ä–∞—Å—Å–≤–µ—Ç ${sunrise}, –∑–∞–∫–∞—Ç ${sunset}, ${weatherDesc} ${weatherIcon}`;
    } catch (e) {
      return '–û—à–∏–±–∫–∞';
    }
  }

  async getWeatherJson(args) {
    try {
      const { city, current, hourly, daily } = await this.getWeatherData(args.CITY);
      return JSON.stringify({
        city,
        temperature: current.temperature,
        feels_like: current.temperature,
        windspeed: current.windspeed,
        winddirection: current.winddirection,
        humidity: hourly.relativehumidity_2m[0],
        precipitation: hourly.precipitation_probability[0],
        cloudcover: hourly.cloudcover[0],
        pressure: hourly.pressure_msl[0],
        sunrise: daily.sunrise[0].split('T')[1].slice(0, 5),
        sunset: daily.sunset[0].split('T')[1].slice(0, 5)
      });
    } catch (e) {
      return '–û—à–∏–±–∫–∞';
    }
  }
}

Scratch.extensions.register(new WeatherExtension());
